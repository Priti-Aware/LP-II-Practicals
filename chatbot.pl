greeting([hello, hi, hey]).

response(hello, ['Hi there!', 'Hello!', 'Hey!', 'Nice to see you!', 'How are you?']).
response(hi, ['Hello!', 'Hey there!', 'Hi!', 'How are you?', 'What can I do for you?']).
response(hey, ['Hello!', 'Hi!', 'Hey there!', 'What can I do for you?', 'Nice to see you!']).

response('how are you?', ['I am fine, thank you!', 'I am doing well, thanks for asking!', 'I am good, how about you?']).

response(_, ['I am not sure what you mean...', 'Could you please rephrase that?', 'I am just a simple chatbot...', 'I am not equipped to answer that.']).

respond(Query, Response) :-
    (var(Query) -> 
        Response = ['I am not sure what you mean...', 'Could you please rephrase that?', 'I am just a simple chatbot...', 'I am not equipped to answer that.']; 
        response(Query, Response), !
    ).

chat :-
    write('Chatbot: Hello! How can I help you?'), nl,
    repeat,
    write('You: '),
    read_line_to_codes(user_input, Input),
    atom_codes(Query, Input),
    (Query = bye -> write('Chatbot: Goodbye!'); 
    (greeting(Query) -> random_member(Greeting, Query), write('Chatbot: '), write(Greeting), nl; 
    respond(Query, Response), random_member(Reply, Response), write('Chatbot: '), write(Reply), nl, fail)),
    Query = bye, !.


"""
greeting([hello, hi, hey]).: This line defines a list of greetings that the chatbot recognizes.
response(hello, ['Hi there!', 'Hello!', 'Hey!', 'Nice to see you!', 'How are you?']).: This line defines responses for the greeting "hello". The chatbot randomly selects one of these responses when it receives the "hello" input.
Similarly, response(hi, ...) and response(hey, ...) define responses for the greetings "hi" and "hey" respectively.
response('how are you?', ['I am fine, thank you!', 'I am doing well, thanks for asking!', 'I am good, how about you?']).: This line defines responses for the question "how are you?". The chatbot randomly selects one of these responses when it receives the "how are you?" input.
response(_, ['I am not sure what you mean...', ...]).: This line defines a default response for any input that the chatbot does not recognize.
respond(Query, Response) :- ...: This line defines the respond/2 predicate, which takes a query and returns a response. It first checks if the query is unbound (i.e., a variable), and if so, it returns a default response. Otherwise, it looks up the response corresponding to the query using the response/2 predicate.
chat :- ...: This line defines the chat/0 predicate, which is the main entry point for interacting with the chatbot. It starts by printing a greeting message. Then, it repeatedly prompts the user for input, reads the input, processes it, and generates a response. This continues until the user inputs "bye".
write('Chatbot: Hello! How can I help you?'), nl,: This line prints a greeting message when the chat predicate is called.
repeat, ...: This line starts an infinite loop to continuously prompt the user for input and generate responses.
write('You: '), ...: This line prompts the user to input their message.
read_line_to_codes(user_input, Input), ...: This line reads the user's input as a list of character codes.
atom_codes(Query, Input), ...: This line converts the list of character codes into an atom, representing the user's query.
(Query = bye -> ...: This line checks if the user's input is "bye". If it is, the chatbot prints a goodbye message and exits the loop.
(greeting(Query) -> ...: This line checks if the user's input is a greeting. If it is, the chatbot randomly selects a greeting from the list of recognized greetings and prints it.
respond(Query, Response), ...: This line calls the respond/2 predicate to generate a response for the user's input.
random_member(Reply, Response), ...: This line randomly selects a response from the list of possible responses generated by the respond/2 predicate.
write('Chatbot: '), write(Reply), nl, fail),: This line prints the selected response and fails to backtrack, causing the loop to continue and prompt the user for input again.
Query = bye, !.: This line breaks the loop if the user's input is "bye"
"""